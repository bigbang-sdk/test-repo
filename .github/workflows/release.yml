name: release

on:
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: write
  statuses: write

jobs:
  release:
    name: release
    if: ${{ github.repository_owner == 'bigbang-sdk' }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest git tag
        id: latest_tag
        run: |
          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            tag=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-dev\.[0-9]+$' | sort -V | tail -n1)
            tag=${tag:-v0.0.0-dev.0}
          else
            tag=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
            tag=${tag:-v0.0.0}
          fi

          # Strip leading "v"
          version="${tag#v}"

          echo "Latest tag: $tag"
          echo "Parsed version: $version"
          echo "git_tag=$version" >> $GITHUB_OUTPUT

      - name: Print tag
        run: echo "Resolved tag is ${{ steps.latest_tag.outputs.git_tag }}"

      - name: Get package name from package.json
        id: package_name
        run: |
          name=$(jq -r .name package.json)
          echo "Package name: $name"
          echo "package=$name" >> $GITHUB_OUTPUT

      - name: Get latest npm version
        id: latest_npm
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
          pkg="${{ steps.package_name.outputs.package }}"

          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            version=$(npm view "$pkg@dev" version 2>/dev/null || echo "0.0.0-dev.0")
          else
            version=$(npm view "$pkg" version 2>/dev/null || echo "0.0.0")
          fi

          echo "Latest NPM version: $version"
          echo "npm_version=$version" >> $GITHUB_OUTPUT

      - name: Determine greater version
        id: compare_versions
        run: |
          git_ver="${{ steps.latest_tag.outputs.git_tag }}"
          npm_ver="${{ steps.latest_npm.outputs.npm_version }}"
          echo "Git tag version:  $git_ver"
          echo "NPM registry version: $npm_ver"
          # pick the higher semver (handles prerelease too)
          previous=$(printf '%s\n%s\n' "$git_ver" "$npm_ver" | sort -V | tail -n1)
          echo "Greater version is $previous"
          # export for downstream steps
          echo "previous_version=$previous" >> $GITHUB_OUTPUT

      - name: Print previous tag
        run: echo "Resolved tag is ${{ steps.compare_versions.outputs.previous_version }}"

      - name: Determine bump type since last tag
        id: bump_type
        run: |
          # 1) Rebuild the tag name (your git tag step strips the "v" prefix)
          start_tag="v${{ steps.latest_tag.outputs.git_tag }}"
          echo "Commit range: $start_tag..HEAD"
          # 2) Ensure we have all tags
          git fetch --tags
          # 3) Grab all subjects + bodies since that tag
          if git rev-parse "$start_tag" >/dev/null 2>&1; then
            # tag exists
            # but may or may not be ancestor
            # use merge-base test if you care about ancestry...
            commits=$(git log "$start_tag"..HEAD --pretty=format:'%s%n%b')
          else
            echo "No such tag: $start_tag;"
            commits=""
          fi
          # 4) Determine highest bump
          if echo "$commits" | grep -E '!: ' -q || echo "$commits" | grep -i 'BREAKING CHANGE' -q; then
            bump_type="major"
          elif echo "$commits" | grep -E '^feat(\(.+\))?: ' -q; then
            bump_type="minor"
          elif echo "$commits" | grep -E '^(fix|perf)(\(.+\))?: ' -q; then
            bump_type="patch"
          else
            bump_type="patch"
          fi
          echo "Determined bump type: $bump_type"
          echo "bump_type=$bump_type" >> $GITHUB_OUTPUT

      - name: Bump version & set new_version
        id: bump_version
        run: |
          # 1) grab the previously resolved version
          previous="${{ steps.compare_versions.outputs.previous_version }}"
          echo "Original previous version: $previous"

          # 2) sanitize: strip any "-dev.<number>" suffix
          sanitized="${previous%%-dev.*}"
          echo "Sanitized previous version: $sanitized"

          # 3) grab the bump_type you determined
          bump="${{ steps.bump_type.outputs.bump_type }}"
          echo "Bump type: $bump"
          
          # 4) bump the version
          new_version=$(npx semver -i "$bump" "$sanitized")
          echo "New version: $new_version"
          
          # 5) export for downstream steps
          echo "new_version=$new_version" >> $GITHUB_OUTPUT




