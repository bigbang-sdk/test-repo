name: release

on:
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: write
  statuses: write

jobs:
  release:
    name: release
    if: ${{ github.repository_owner == 'bigbang-sdk' }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Get latest git tag
        id: latest_tag
        run: |
          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            tag=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-dev\.[0-9]+$' | sort -V | tail -n1)
            tag=${tag:-v0.0.0-dev.0}
          else
            tag=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
            tag=${tag:-v0.0.0}
          fi
      
          # Strip leading "v"
          version="${tag#v}"
      
          echo "Latest tag: $tag"
          echo "Parsed version: $version"
          echo "git_tag=$version" >> $GITHUB_OUTPUT

          
      - name: Print tag
        run: echo "Resolved tag is ${{ steps.latest_tag.outputs.git_tag }}"

      - name: Get package name from package.json
        id: package_name
        run: |
          name=$(jq -r .name package.json)
          echo "Package name: $name"
          echo "package=$name" >> $GITHUB_OUTPUT

      - name: Get latest npm version
        id: latest_npm
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
          pkg="${{ steps.package_name.outputs.package }}"
      
          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            version=$(npm view "$pkg@dev" version 2>/dev/null || echo "0.0.0-dev.0")
          else
            version=$(npm view "$pkg" version 2>/dev/null || echo "0.0.0")
          fi
      
          echo "Latest NPM version: $version"
          echo "npm_version=$version" >> $GITHUB_OUTPUT

      - name: Determine greater of git_tag and npm_version
        id: previous_tag
        run: |
          git_tag="${{ steps.latest_tag.outputs.git_tag }}"
          npm_version="${{ steps.latest_npm.outputs.npm_version }}"
      
          highest=$(printf "%s\n%s\n" "$git_tag" "$npm_version" | npx semver -r "*" | tail -n1)
      
          echo "Highest version: $highest"
          echo "previous_tag=$highest" >> $GITHUB_OUTPUT
